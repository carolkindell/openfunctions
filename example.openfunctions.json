{
  "$schema": "./openfunctions.schema.json",
  "openfunctions": "0.0.1",

  "info": {
    "title": "User Management Library",
    "version": "2.1.3",
    "license": "MIT",
    "description": "A library for managing user accounts"
  },

  "runtime": {
    "node": ">=16.0.0"
  },

  "environment": {
    "DATABASE_URL": {
      "required": true,
      "description": "Connection string for the database",
      "format": "postgresql://user:password@host:port/dbname"
    },
    "LOG_LEVEL": {
      "required": false,
      "default": "info",
      "enum": ["debug", "info", "warn", "error"],
      "description": "Logging verbosity level"
    },
    "API_KEY": {
      "required": true,
      "sensitive": true,
      "description": "API key for external service authentication"
    }
  },

  "functions": {
    "createUser": {
      "description": "Creates a new user",
      "params": [
        {
          "name": "userData",
          "description": "User data object",
          "required": true,
          "schema": { "$ref": "#/components/schemas/UserData" }
        }
      ],
      "result": {
        "name": "user",
        "description": "Created user object",
        "schema": { "$ref": "#/components/schemas/User" }
      },
      "effects": [{ "pointer": "state.users", "effect": "push" }],
      "errors": [
        {
          "code": "VALIDATION_ERROR",
          "message": "Invalid user data provided",
          "data": { "$ref": "#/components/schemas/ValidationError" }
        }
      ],
      "requires": ["environment.DATABASE_URL"],
      "async": false,
      "deprecated": false,
      "examples": [
        {
          "name": "Create admin user",
          "params": [
            {
              "name": "userData",
              "value": {
                "name": "John Doe",
                "email": "john@example.com",
                "role": "ADMIN"
              }
            }
          ],
          "result": {
            "id": "usr_123456",
            "name": "John Doe",
            "email": "john@example.com",
            "role": "ADMIN",
            "createdAt": "2025-05-09T12:00:00Z"
          }
        }
      ]
    },
    "User/constructor": {
      "description": "Creates a new User instance",
      "params": [
        {
          "name": "data",
          "description": "User data",
          "required": true,
          "schema": { "$ref": "#/components/schemas/UserData" }
        }
      ],
      "result": {
        "name": "userInstance",
        "description": "New user instance (not yet persisted)",
        "schema": { "$ref": "#/components/schemas/User" }
      },
      "errors": [],
      "requires": [],
      "async": false
    },
    "User/save": {
      "description": "Persists user to database",
      "params": [],
      "result": {
        "name": "success",
        "description": "Whether the save was successful",
        "schema": { "type": "boolean" }
      },
      "errors": [
        {
          "code": "VALIDATION_ERROR",
          "message": "Invalid user state",
          "data": { "$ref": "#/components/schemas/ValidationError" }
        },
        {
          "code": "DATABASE_ERROR",
          "message": "Failed to connect to database",
          "data": { "type": "object" }
        }
      ],
      "requires": ["environment.DATABASE_URL"],
      "async": true,
      "instanceMethod": true
    },
    "User/findById": {
      "description": "Finds a user by ID",
      "params": [
        {
          "name": "id",
          "description": "User's unique identifier",
          "required": true,
          "schema": { "type": "string" }
        }
      ],
      "result": {
        "name": "user",
        "description": "Found user or null if not found",
        "schema": {
          "oneOf": [{ "$ref": "#/components/schemas/User" }, { "type": "null" }]
        }
      },
      "errors": [
        {
          "code": "DATABASE_ERROR",
          "message": "Failed to connect to database",
          "data": { "type": "object" }
        }
      ],
      "requires": ["environment.DATABASE_URL"],
      "async": true,
      "staticMethod": true
    }
  },

  "constants": {
    "DEFAULT_PAGE_SIZE": {
      "schema": { "type": "number" },
      "description": "Default number of items per page"
    },
    "USER_ROLES": {
      "schema": {
        "type": "array",
        "items": { "type": "string", "enum": ["ADMIN", "EDITOR", "VIEWER"] }
      },
      "description": "Available user roles"
    }
  },

  "components": {
    "schemas": {
      "UserData": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "description": "User's full name" },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "role": {
            "type": "string",
            "enum": ["ADMIN", "EDITOR", "VIEWER"],
            "default": "VIEWER"
          }
        },
        "required": ["name", "email"]
      },
      "User": {
        "type": "object",
        "description": "User account representation",
        "properties": {
          "id": {
            "type": "string",
            "readonly": true,
            "description": "Unique identifier"
          },
          "name": { "type": "string", "description": "User's full name" },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email address"
          },
          "role": {
            "type": "string",
            "enum": ["ADMIN", "EDITOR", "VIEWER"],
            "description": "User's role in the system"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readonly": true,
            "description": "Timestamp when user was created"
          }
        },
        "required": ["id", "name", "email", "role", "createdAt"]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field that failed validation"
          },
          "message": { "type": "string", "description": "Error message" },
          "code": { "type": "string", "description": "Error code" }
        },
        "required": ["field", "message"]
      },
      "State": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/User" },
            "description": "Collection of users"
          }
        }
      }
    }
  }
}
